mysql

查看MySQL数据库服务器和数据库MySQL字符集。
show variables like '%char%';

数据库：
1.实体：表名，按照对象的概念来划分
2.属性：实体的特效==》字段

数据库种类：
关系型
非关系型 层次型 网状型 redis

启动MySQL服务：net start mysql
停止MySQL服务：net stop mysql

-V,--version  //输出版本信息并且退出


mysql常用命令：
exit退出
	其他退出:quit 或 \q
select now():查看当前时间
select curdate():当前日期
select curtime():当前时间
select version():MySQL版本
select user():查看用户

数据表 以及 数据类型
1.实用命令：
	show databases;//查看数据库
默认的几个数据库：
information schema //日志信息 在某些版本中不一定有
mysql:mysql系统库
test测试库
	创建数据库
		create database 数据库名称
	删除数据库
		drop database 数据库名称
	使用数据库
		use 数据库名称
	查看数据库中的表
		show tables;
数据表
	create table 数据表名称(
		列定义
		列名称 类型 [默认值] [auto_increment自增长][主索引primary key]
		列名称 类型 [默认值] 
		列名称 类型 [默认值] 
		...
		索引定义：	
	)
数据类型：
1.整型：
	tinyint 1字节 有符号 -128---127 无符号0---255
	smallint 2字节 有符号 -32768---32768 无符号0---65535
	int 4字节 有符号 -2147483648----2147483648 无符号0---4294967295。
	bigint 8字节
	
	bool ===>tinyint 1
2.浮点型：
	float 4字节
	double 4字节
	DECIMAL[m,d]精度小数 m总位数 d小数点后边的位数。
3.字符串：
	char(位数)定长字符 255
	varchar(位数)变长字符 255
	text 65535个字符
	enum(val1,val2,val3...)列枚举：enum("男","女")
4.日期时间
	date 日期
	time 时间
	datetime 日期时间

例：
create table stu(
	id int(6) auto_increment primary key
)
primary key 主键：确定唯一记录的字段

修改：
update 表名称set 字段=值。。。where id = num;
删除：
delete from 表名称 where id=num;
注意：删除记录后，被删除的记录的位置还在。
查询：
select 字段列表from表名称[where条件][order by 字段asc|desc][limit 起始位置，长度][group by 字段名称(分组)]

注意：可以给字段名称 表名称 起别名
例：select stuNum as stn,stuName as sn from student as sd;
起别名：字段简单，方便其他程序调用

order by 排序 asc升序 desc降序；
例:select * from student order by id desc;

limit 起始位置，长度  //截取记录

group by 分组：
例：select * from books group by bTypeId 按照类型ID分组
分组以后，每组中的记录都会取1条，记住啊，是一条！表示一种类型嘛。

where 条件
比较符号：> < >= =< 
例：select * from books where bid = 100;

逻辑运算：and or
例：select * from books where bid >100 and bid<110;

模糊搜索：字符串中含有某个关键词，就能找到
	like "%关键词%" %表示任意字符串
	_：这个下划线表示配置一个字符
例：select *from books where bName like "%入门%";

范围
连续范围
	[not]between...and
例：select * from books where bid between 100 and 110;
			等同于：bid>=100 and bid<=110;

不连续范围
	[not]in()
例：select * from books where in(100,103,105,108);
			等同于：bid=100 or bid=103 or bid=105....

子查询
select 语句中的的条件又出现查询语句，子查询
select * from books where btypiid =(select btypeid from btype where btypename = '网站')；
主表：后边需求中涉及到的表
从表：前面需求涉及到的表
例：查询张三的住房信息；
效率低

连接查询：通过多张表的共有字段，查找多张表构成的并集。
两张表以上。
内连接：共同字段相等。两张表的地位相等。
select * from 表1，表2 where 表1.共有字段 = 表2.共有字段
例：select * from books as bs,btype as bt where bs.btypeid=bt.btypeid;
注意：内连接中共有字段中的值，必须两张都有，才能找到。

外连接：表分主，从。主表中的数据，全部展示，从 有和主表对应的数据展示，没有对应，不展示
left join
	select * from 主表left join 从表 on 主表.共有字段 = 从表.共有字段[where其他条件]；
例：select * from books as bs LEFT JOIN btype as bt on bs.btypeid = bt.btypeid;
right join
select * from 从表 right join 主表 on 主表.共有字段 = 从表.共有字段[where其他条件]；
例：select * from btype as bt right join books as bs on bs.btypeid = bt.btypeid;

mysql聚合函数 ==>这是MySQL系统提供的实现特定动能的函数；
1.算术函数
sum()求和 
例：select sum(btypeid) from books;

avg()求平均值
例：select avg(btypeid) from books;

count()统计记录数
例：select count(*)from books;

round(float,2)四舍五入且保留小数点后两位
例：select round(avg(price),2) from books;

2.字符串函数
concat(str1,str2,str3...)拼接
例：select concat(bName,bTypeid) as bb from books;

mysql中的索引
索引：类似于查询目录 索引是以文件的形式存储的。
特点：数据的更新和索引的更新是同步的。
作用：提高查询效率
索引的类型：
	主索引：primary key ,主键 确定唯一记录。where id=???；
	id int auto_increment primary key.
	普通索引：
	最基本的索引，可以加多列上
		创建表的时候添加
	例：	create table student(
		id int(6) auto_increment primary key,
		stuNum int(2),
		pwd varchar(20),
		key pd(pwd)  //这是添加普通索引的方式。
	)
	对已经有的表添加索引
	alter table 表名称 add index 索引名称(字段1)
	例：alert table student add index ts(stuNum);

唯一索引：
	唯一索引 可以加载多列上，列上加了唯一索引，则该列值不能重复。
      例：创建表
	create table student(
		id int(6) auto_increament primary key,
		stuNum int(2),
		...
		unique key 索引名称(字段)
	)
	修改表
	alert table 表名称 add unique 索引名称(字段)

	全文索引：加载有大段字符串的文本上。
	  例：创建表
	create table student(
		id int(6) auto_increament primary key,
		stuNum int(2),
		...
		fulltext key 索引名称(字段)
	)
	修改表
	alert table 表名称 add fulltext 索引名称(字段)

添加索引的顺序：
主索引
唯一索引
普通索引
全文索引

索引的缺点：
数据索引同步更新，全有索引，降低效率。
索引是以文件的形式存储的，索引过多，索引文件会很大。

一般情况而言
用户名 手机 性别 商品名称 价格 供应商 类型 都是要加索引的。



mysql外键
1.什么是外键：表与表之间的特定关系，保持了数据的完整性和一致性；
外键控制：让用户不更新数据，或者是用户删除数据的时候，让订单同步的删除

2.外键的特点：
1）innodb 类型  查看的方式 show create table 表名 (存储引擎)engine = 值(innodb)
2）外键是两张表的约束关系。
3）外键的名称是唯一的。

3.创建外键：
create table 表名(
	列定义
	索引定义
	外键定义[constraint约束名称] foreign key [外键字段]
	references[外键名称](外键字段)
	[on delete {restrict|cascade|set null|no action}]
	[on update {restrict|cascade|set null|no action}]
)
restrict:拒绝对父表的删除或更新操作
cascade:从父表删除或更新且自动删除或更新子表中匹配的行。
set null:从父表删除或更新行，设置子表外键字段为null。如果使用该选项，必须保证子表列没有指定NOT NULL。
no action:不作为
例：create table user(
	id int(6) auto_increment primary key,
	name varchar(30),
	sex int(1)
)engine = innodb;

例：create table orders(
	order_id int(6) auto_increment primary key,
	u_id int(6),
	username varchar(30),
	money int(6),
	datatime date,
	key ud(u_id),
	foreign key order_f_key(u_id) references user(id)
)engine=innodb;

通过修改表来改变外键的属性
alter table 表名称 add foreign key 外键字段 references 主表(字段) on delete/on update cascade;
例：alter table orders add foreign key(u_id) references user(id) on delete cascade;  //在两个表之间建立一种删除关系

删除外键
alter table 表名称 drop foreign key 外键名称

truncate table //快速删除数据表中的所有记录，但保留数据表结构
1.truncate table是非常快的
2.truncate之后的自增字段从头开始计数了，而DELETE的仍保留原来的最大数值 
相同点
truncate和不带where子句的delete, 以及drop都会删除表内的数据
不同点:
1. truncate和 delete只删除数据不删除表的结构(定义)
    drop语句将删除表的结构被依赖的约束(constrain),触发器(trigger),索引(index); 依赖于该表的存储过程/函数将保留,但是变为invalid状态.
2.delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效;如果有相应的trigger,执行的时候将被触发.
   truncate,drop是ddl, 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger.
3.delete语句不影响表所占用的extent, 高水线(high watermark)保持原位置不动
  显然drop语句将表所占用的空间全部释放
  truncate 语句缺省情况下见空间释放到 minextents个 extent,除非使用reuse storage;   truncate会将高水线复位(回到最开始).
4.速度,一般来说: drop>; truncate >; delete
5.安全性:小心使用drop 和truncate,尤其没有备份的时候.否则哭都来不及
使用上,想删除部分数据行用delete,注意带上where子句. 回滚段要足够大.
想删除表,当然用drop
想保留表而将所有数据删除. 如果和事务无关,用truncate即可. 如果和事务有关,或者想触发trigger,还是用delete.
如果是整理表内部的碎片,可以用truncate跟上reuse stroage,再重新导入/插入数据 



创建数据库,设置编码方式
CREATE DATABASE IF NOT EXISTS db_name [CHARACTER SET GBK];

查看创建的数据库
SHOW CREATE DATABASE db_name;

修改数据库
ALTER DATABASE db_name [CHARACTER SET GBK];

删除数据库
DROP DATABASE IF EXISTS db_name;

数据类型
整型：TINYINT,SMALLINT,MEDIUMINT,INT,BIGINT
浮点型：FLOAT,DOUBLE
日期时间：YEAR,TIME,DATA,DATETIME,TIMESTAMP
字符型：CHAR,VARCHAR,TINYTEXT,TEXT,MEDIUMTEXT,LONGTEXT,ENUM,SET
unsigned  表示无符号类

查看表结构
desc 表名;
show columns from 表名；

插入记录
INSERT [INTO] tbl_name [(col_name,...)] VALUES(VAL,...)

自动编号，且必须与主键组合使用,默认情况下，起始值为1
auto_increment；

主键约束，每张数据表只能存在一个主键，主键保证记录的唯一性，主键自动为NOT NULL;
primary key;

注意：
auto_increment 必须与primary key 一起使用，但是primary key不必与auto...一起使用。

唯一约束，唯一约束可以保证记录的唯一性，唯一约束的字段可以为空值，每张数据表可以存在多个唯一约束。
unique key;

默认约束
当插入记录时，如果没有明确为字段赋值，则自动赋予默认值；
例：
CREATE TABLE tb2(
id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(20) NOT NULL,
age TINYINT UNSIGNED NULL,
sex enum('1','2','3') DEFAULT 3
);

外键约束  foreign key
保存数据的一致性，完整性；
实现一对一或一对多关系。
外键约束的要求：
1.父表和字表必须使用相同的存储引擎，而且禁止使用临时表。
2.数据表的存储引擎只能为InnoDB。
3.外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号为必须相同；而字符的长度则可以不同。
4.外键列和参照列必须创建索引。如果外键列不存在索引的话，MYSQL将自动创建索引。
例：
CREATE TABLE tb2(
pid SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
pName char(10) NOT NULL,
FOREIGN KEY (pName) REFERENCES tb1(id)
);

修改数据表
添加单列：
ALTER TABLE tb_name ADD [COLUMN] col_name column_definition[FIRST]|AFTER col_name]
例：
ALTER TABLE tb1 ADD age TINYINT NOT NULL AFTER username;
删除列：
ALTER TABLE tb_name DORP col_name;
例:
ALTER TABLE tb1 DROP age,DROP username;
修改列定义
ALTER TABLE tb_name MODIFY[COLUMN] col_name col_define [FIRST|AFTER col_name];
修改列名称
ALTER TABLE tb_name CHANGE[COLUMN] old_col_name new_col_name column_define
例：ALTER TABLE tb1 CHANGE pid p_id TINYINT NOT NULL;

数据表更名
方法一、ALTER TABLE tb_name RENAME new_tbl_name;
方法二、RENAME TABLE tb_name TO new_tbl_name;

将查询结果插入数据库
INSERT[INTO] tb_name WHERE SELECT...;
例：INSERT tb1 SELECT age FROM tb2 WHERE id>=20;

更新操作
UPDATE tb_name SET col_name = col_value,...,WHERE ...;//没有后边的条件则全部被更新；

删除记录操作
DELETE FROM TB_name WHERE ...;

查询操作
SELECT select_expr [,select_expr...]
[
    FROM table_references
    [WHERE where_condition]
    [GROUP BY{col_name|position}[ASC|DESC],...]
    [HAVING where_condition]
    [ORDER BY{col_name | expr|position}[ASC|DESC],...]
    [LIMIT{[offset,]row_count|row_count OFFSET offset}]
]

分组条件//用HAVING的时候，分组中的条件要嘛就是有聚合函数，要嘛字段必须出现在前面
[HAVING where contain];
例：SELECT sex FROM user WHERE GROUP BY sex HAVING COUNT(*) DESC;
或例：SELECT sex,age FROM user WHERE GROUP BY sex HAVING age>6 DESC;


添加约束
主键：
例:ALTER TABLE tb1 ADD CONSTRAINT PRIMARY KEY(id);

删除约束
ALTER TABLE tb_name DROP {INDEX|KEY} index_name;
例：ALTER TABLE tb1 DROP PRIMARY KEY 

         ANY	    SOME       ALL
> >=    最小值     最小值   最大值
< <=    最大值     最大值   最小值
=       任意值     任意值   
<> !=                       任意值

连接类型
INNER JOIN ,内连接 //仅显示满足条件的信息，类似数学里的交集；
在MySQL中，JOIN,CROSS JOIN和INNER JOIN是等价的。
LEFT[OUTER] JOIN,左外连接
RIGHT[OUTER] JOIN,右外连接
多表的更新
例：UPDATE tb1 INNER JOIN tb2 ON goods_cate(属于tb1字段) = cate_name (属于tb2字段) SET goods_cate(属于tb1字段) = cate_id(属于tb2字段);

无限极分类
例：SELECT s.id,s.name,p.name FROM book AS s LEFT JOIN book AS p ON p.name = s.name;
无限极分类是对自身表的查询,在程序中需要用到递归

加密函数
MD5()   信息摘要算法
PASSWORD()    密码算法

存储过程
优点：
1.增强WQL语句的功能和灵活性
2.实现较快的执行速度
3.减少网络流量

创建存储过程：
CREATE 
[definer = {user| CURRENT_USER}]
PROCEDURE sp_name([proc_parameter])
[characteristic...]routine_body

proc_parameter:
[IN|OUT|INOUT] param_name type
IN:表示该参数的值必须在调用存储过程时指定
OUT:表示该参数的值可以被存储过程改变，并且可以返回
INOUT：表示该参数在调用时指定，并且可以被改变和返回

过程体：
过程体由合法的SQL语句构成
过程体可以是任意的SQL语句；
过程体如果为符合结构则使用BEGIN...END语句
复合结构可以包含声明，循环，控制结构

调用存储结构
CALL sp_name([parameter])
CALL sp_name()

例：创建一个IN类型的存储过程
DELIMITER//
CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)
BEGIN
DELETE FROM users WHERE id = p_id;
END
//

删除存储过程:
DROP DROCEDURE [IF EXISTS] sp_name

存储过程与自定义函数的区别
存储过程实现的功能要复杂一些；而函数的针对性更强
存储过程可以返回多个值；函数只能有一个返回值
存储过程一般独立的来执行；而函数可以作为其他SQL语句的组成部分来出现

注意：
1.存储过程只能修改一些特性，不能修改过程体，如果要修改过程体就只能删除然后重建
2.创建存储过程或者自定义函数是需要通过delimiter语句修改定界符

存储引擎：
MySQL可以将数据以不同的技术存储在文件(内存)中,这种技术就称为存储引擎。
每一种存储引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能

存储引擎类型
MyISAM
InnoDB
Memory
CSV
Archive

并发控制
当多个连接对记录进行修改是保证数据的一致性和完整性。

锁
共享锁（读锁）：在同一时间段内，多个用户可以读取同一个资源，读取过程中数据不会发生任何变化。
排他锁（写锁）：在任何时候只能有一个用户写资源，当进行写锁时会阻塞其他的读锁或者写锁操作。

锁颗粒
表锁，是一种开销最小的锁策略。
行锁，是一种开销最大的锁策略。

事务：事务用于保证数据库的完整性
事务的特效：
原子性(Atomicity)
一致性(Consistency)
隔离性(Isolation)
持久性(Durability)

外键：是保证数据一致性的策略
索引：是对数据表中一列或多列的值进行排序的一种结构。


多表的更新操作技巧
UPDATA user1 as a JOIN(SELECT b.username FROM user1 AS a JOIN user2 b ON a.username = b.username)b ON a.username=b.username SET a.over='齐天大圣';